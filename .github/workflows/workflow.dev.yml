name : Develop PR Merge - CI/CD to Dev Server

# 트리거
# - develop 브랜치에 PR이 merge 및 close 되었을 때 workflow 동작
on:
  push:
    branches:
      - test
#on:
#  pull_request:
#    branches:
#      - develop
#    types:
#      - closed

env:
  DOCKER_IMAGE_NAME: jintaeklim/erp
  CONTAINER_NAME: erpBack

# jobs
# - workflow 내 단계적으로 처리할 작업
jobs:
  ci:
    # PR이 merge 된 경우에만 동작하도록 조건 명시
#    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest # 최신 Ubuntu 러너에 의해 동작
    environment: develop # develop 환경 변수설정 사용
    steps:
      # 레포지토리의 코드를 러너 안에서 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4

      # temurin 배포판을 사용하여 JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # src/main/resources에 application-secret.yml 파일 생성
      - name: Create application-secret.yml
        run: |
          mkdir -p src/main/resources
          echo "${{secrets.SECRET_YML}}" | base64 --decode > src/main/resources/application-secret.yml

      # gradlew 스크립트 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle 빌드 및 테스트
      - name: Build and test with gradle
        run: ./gradlew clean build

      # docker build 관련 설정
      - name: Set up docker buildx
        uses: docker/setup-buildx-action@v3

      # dockerhub 로그인
      - name: Login to dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      # docker 이미지 build 및 push
      - name: Build and push docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{env.DOCKER_IMAGE_NAME}}

  cd:
    needs: ci # ci 작업 선행 후 동작
    runs-on: ubuntu-latest
    environment: develop
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # EC2 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST}}
          username: ${{ secrets.EC2_USERNAME}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            set -e
            echo "배포를 시작합니다."

            echo "도커 이미지 pull"
            docker pull ${{ env.DOCKER_IMAGE_NAME }}

            echo "컨테이너 삭제 및 정리"
            docker-compose -f docker-compose.yml down

            echo "새로운 컨테이너 시작"
            docker-compose -f docker-compose.yml up -d

            echo "사용하지 않는 이미지 삭제"
            docker image prune -af

            echo "배포가 성공적으로 마무리 되었습니다!"
